####################################################################################
#                                                                                  #
#                  Multivariate Example 5.1, pages 85 - 88                         #
#                                                                                  #
####################################################################################
mkdir Multivar_anim
cd Multivar_anim

# generate pedigree file
echo "anim sire dam" > ped_head
cat <<EOF > pedigree
1 . .
2 . .
3 . .
4 1 .
5 3 2
6 1 2
7 4 5
8 3 6
EOF

# generate performance file
echo "anim Sex WWG PWG" > perf_head
cat <<EOF > perf
4 1 4.5 6.8
5 2 2.9 5.0
6 2 3.9 6.8
7 1 3.5 6.0
8 1 5.0 7.5
EOF

# generate genetic variance file
cat <<EOF > G0
20 18
18 40
EOF

# generate residual variance file
cat <<EOF > R0
40 11
11 30
EOF

invert -i G0 -o G0inv
export g11=$(mprint -p G0inv|  awk 'NR==1{print $1}')
export g12=$(mprint -p G0inv|  awk 'NR==1{print $2}')
export g22=$(mprint -p G0inv|  awk 'NR==2{print $2}')

# stack pedigree
stack_ped pedigree ped_stk

# generate Ainverse and calculate inbreeding
invnrm -i ped_stk -a -o inbreed -v Ainv

# vectors to generate X and Z
awk '{print $1}' perf > id.dat 		# animals with phenotypes
awk '{print $2}' perf > Sex 		# sex
awk '{print $3}' perf > y1 			# WWG phenotypes
awk '{print $4}' perf > y2 			# PWG phenotypes

# vectors for levels of each fixed effect
awk '$1!="."{print $1}' Sex | sort -u > Sex.eff

# vector of animals in the pedigree
awk '{print $1}' ped_stk > id.eff

# vector of unique animals in the performance file
awk '$1!="."{print $1}' id.dat | sort -u > perf_id.eff

# create X (no missing values so X00 and X01 are identical)
cgen_z -d Sex -e Sex.eff -r y1 -o X00

# create Z (no missing values so Z00 and Z01 are identical)
cgen_z -d id.dat -e id.eff -r y1 -o Z00

cnewr  -S -R resid -r R0 y1 y2
#cnewr  -S -R genet -r G0 y1 y2

# create LHS matrices
cmult -t -a X00 -b X00 -R resid11 -c X1RX1
cmult -t -a X00 -b X00 -R resid12 -c X1RX2
cmult -t -a X00 -b X00 -R resid22 -c X2RX2

cmult -t -a X00 -b Z00 -R resid11 -c X1RZ1
cmult -t -a X00 -b Z00 -R resid12 -c X1RZ2
cmult -t -a X00 -b Z00 -R resid12 -c X2RZ1
cmult -t -a X00 -b Z00 -R resid22 -c X2RZ2

cmult -t -a Z00 -b Z00 -R resid11 -c Z1RZ1
cmult -t -a Z00 -b Z00 -R resid12 -c Z2RZ1
cmult -t -a Z00 -b Z00 -R resid22 -c Z2RZ2

# create RHS vectors
cmult -t -a X00 -b y1 -R resid11 -c X1Ry1
cmult -t -a X00 -b y1 -R resid12 -c X2Ry1
cmult -t -a X00 -b y2 -R resid12 -c X1Ry2
cmult -t -a X00 -b y2 -R resid22 -c X2Ry2

cmult -t -a Z00 -b y1 -R resid11 -c Z1Ry1
cmult -t -a Z00 -b y1 -R resid12 -c Z2Ry1
cmult -t -a Z00 -b y2 -R resid12 -c Z1Ry2
cmult -t -a Z00 -b y2 -R resid22 -c Z2Ry2

cadd -a X1Ry1 -b X1Ry2 -c rhs.0 #sex effects WWG
cadd -a X2Ry1 -b X2Ry2 -c rhs.1 #sex effects PWG

cadd -a Z1Ry1 -b Z1Ry2 -c rhs.2 #BV WWG
cadd -a Z2Ry1 -b Z2Ry2 -c rhs.3 #BV PWG


# set up LHS
echo "MAP
X1RX1   X1RX2   X1RZ1          X1RZ2
sym     X2RX2   X2RZ1          X2RZ2
sym     sym     Z1RZ1+Ainv*$g11 Z2RZ1+Ainv*$g12
sym     sym     sym            Z2RZ2+Ainv*$g22" > lhsmap

# set up RHS
echo "MAP
rhs.0
rhs.1
rhs.2
rhs.3" > rhsmap

# solve!
pcg -A lhsmap -b rhsmap -o sol -n 100 -N

# generate results files
mkdir Results
echo "Effect Solution" > Results/FixedEffectsWWG
paste -d " " <(cat Sex.eff) sol.rhs.0 >> Results/FixedEffectsWWG # will be in a different order to textbook
echo "Effect Solution" > Results/FixedEffectsPWG
paste -d " " <(cat Sex.eff) sol.rhs.1 >> Results/FixedEffectsPWG
echo "Animal Solution" > Results/AnimalEffectsWWG
paste -d " " id.eff sol.rhs.2 >> Results/AnimalEffectsWWG
echo "Animal Solution" > Results/AnimalEffectsPWG
paste -d " " id.eff sol.rhs.3 >> Results/AnimalEffectsPWG
