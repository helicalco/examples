####################################################################################
#                                                                                  #
#                  Multivariate Example 5.1, pages 85 - 88                         #
#                                                                                  #
####################################################################################
mkdir 05_1_Multivar_anim
cd 05_1_Multivar_anim

# generate pedigree file
echo "anim sire dam" > ped_head
cat <<EOF > pedigree
1 . .
2 . .
3 . .
4 1 .
5 3 2
6 1 2
7 4 5
8 3 6
EOF

# generate performance file
echo "anim Sex WWG PWG" > perf_head
cat <<EOF > perf
4 1 4.5 6.8
5 2 2.9 5.0
6 2 3.9 6.8
7 1 3.5 6.0
8 1 5.0 7.5
EOF

# generate genetic variance file
cat <<EOF > G0
20 18
18 40
EOF

# generate residual variance file
cat <<EOF > R0
40 11
11 30
EOF

invert -i G0 -o G0inv
export g11=$(mprint -p G0inv|  awk 'NR==1{print $1}')
export g12=$(mprint -p G0inv|  awk 'NR==1{print $2}')
export g22=$(mprint -p G0inv|  awk 'NR==2{print $2}')

# stack pedigree
stack_ped pedigree ped_stk

# generate Ainverse and calculate inbreeding
invnrm -i ped_stk -a -o inbreed -v Ainv

# vectors to generate X and Z
awk '{print $1}' perf > id.dat 		# animals with phenotypes
awk '{print $2}' perf > Sex 		# sex
awk '{print $3}' perf > y0 			# WWG phenotypes
awk '{print $4}' perf > y1 			# PWG phenotypes

# vectors for levels of each fixed effect
awk '$1!="."{print $1}' Sex | sort -u > Sex.eff

# vector of animals in the pedigree
awk '{print $1}' ped_stk > id.eff

# vector of unique animals in the performance file
awk '$1!="."{print $1}' id.dat | sort -u > perf_id.eff

# create X (no missing values so X00 and X01 are identical)
helical euler zgen -d Sex -e Sex.eff -r y0 -o X00

# create Z (no missing values so Z00 and Z01 are identical)
helical euler zgen -d id.dat -e id.eff -r y0 -o Z00

cnewr  -S -R resid -r R0 y0 y1

# create LHS and RHS matrices
cat << EOF > expr-lhs-rhs
#lhs
X1RX1 = X00' * resid11 * X00
X1RX2 = X00' * resid12 * X00
X2RX2 = X00' * resid22 * X00
X1RZ1 = X00' * resid11 * Z00
X1RZ2 = X00' * resid12 * Z00
X2RZ1 = X00' * resid12 * Z00
X2RZ2 = X00' * resid22 * Z00
Z1RZ1 = Z00' * resid11 * Z00
Z2RZ1 = Z00' * resid12 * Z00
Z2RZ2 = Z00' * resid22 * Z00

write("X1RX1", X1RX1)
write("X1RX2", X1RX2)
write("X2RX2", X2RX2)
write("X1RZ1", X1RZ1)
write("X1RZ2", X1RZ2)
write("X2RZ2", X2RZ2)
write("Z1RZ1", Z1RZ1)
write("X2RZ1", X2RZ1)
write("Z2RZ1", Z2RZ1)
write("Z2RZ2", Z2RZ2)

#rhs
X1Ry1 = X00' * resid11 * y0
X2Ry1 = X00' * resid12 * y0
X1Ry2 = X00' * resid12 * y1
X2Ry2 = X00' * resid22 * y1
rhs.0 = X1Ry1 + X1Ry2 #sex effects WWG
rhs.1 = X2Ry1 + X2Ry2 #sex effects PWG

Z1Ry1 = Z00' * resid11 * y0
Z2Ry1 = Z00' * resid12 * y0
Z1Ry2 = Z00' * resid12 * y1
Z2Ry2 = Z00' * resid22 * y1
rhs.2 = Z1Ry1 + Z1Ry2 #BV WWG
rhs.3 = Z2Ry1 + Z2Ry2 #BV PWG

write("rhs.0", rhs.0)
write("rhs.1", rhs.1)
write("rhs.2", rhs.2)
write("rhs.3", rhs.3)
EOF

helical euler expr expr-lhs-rhs

# set up LHS
echo "MAP
X1RX1   X1RX2   X1RZ1          X1RZ2
sym     X2RX2   X2RZ1          X2RZ2
sym     sym     Z1RZ1+Ainv*$g11 Z2RZ1+Ainv*$g12
sym     sym     sym            Z2RZ2+Ainv*$g22" > lhsmap

# set up RHS
echo "MAP
rhs.0
rhs.1
rhs.2
rhs.3" > rhsmap

# solve!
helical euler pcg lhsmap rhsmap sol -n 100 

# generate results files
mkdir Results
echo "Effect Solution" > Results/FixedEffectsWWG
paste -d " " Sex.eff <(mprint -p sol_0_0) >> Results/FixedEffectsWWG # will be in a different order to textbook
echo "Effect Solution" > Results/FixedEffectsPWG
paste -d " " Sex.eff <(mprint -p sol_1_0) >> Results/FixedEffectsPWG
echo "Animal Solution" > Results/AnimalEffectsWWG
paste -d " " id.eff <(mprint -p sol_2_0) >> Results/AnimalEffectsWWG
echo "Animal Solution" > Results/AnimalEffectsPWG
paste -d " " id.eff <(mprint -p sol_3_0) >> Results/AnimalEffectsPWG
