####################################################################################
#                                                                                  #
#                  Multivariate Example 5.5, pages 102 - 105                       #
#                                                                                  #
####################################################################################
mkdir 05_5_Multivar_anim
cd 05_5_Multivar_anim

# generate pedigree file
# IDs can be left as in the textbook e.g. 1, 2 or can be strings e.g. anim001 or ID1 etc.
echo "anim sire dam" > ped_head
cat <<EOF > pedigree
anim001 . .
anim002 . .
anim003 . .
anim004 anim001 anim002
anim005 anim003 anim002
anim006 anim001 anim005
anim007 anim003 anim004
anim008 anim001 anim007
EOF

# generate performance file
echo "anim HYS1 HYS2 FAT1 FAT2" > perf_head
cat <<EOF > perf
anim004 1 1 201 280
anim005 1 2 150 200
anim006 2 1 160 190
anim007 1 1 180 250
anim008 2 2 285 300
EOF

# generate genetic variance file
cat <<EOF > G0
35 28
28 30
EOF

# generate residual variance file
cat <<EOF > R0
65 27
27 70
EOF

cat << EOF > expr-G0
G0inv = inv(G0)
write("g11", G0inv[1;1])
write("g12", G0inv[1;2])
write("g22", G0inv[2;2])
EOF

helical euler expr expr-G0

# stack pedigree
helical bolt pedstack pedigree ped_stk

# generate Ainverse 
helical bolt invnrm -p ped_stk -v Ainv

# vectors to generate X and Z and Z.s
awk '{print $1}' perf > id.dat.1 # animals with phenotypes
awk '{print $1}' perf > id.dat.2 # animals with phenotypes
awk '{print $2}' perf > HYS1 # HYS1
awk '{print $3}' perf > HYS2 # HYS2
awk '{print $4}' perf > y1 # FAT1 phenotypes
awk '{print $5}' perf > y2 # FAT2 phenotypes

# vectors for levels of each fixed effect
awk '$1!="."{print $1}' HYS1 | sort -u > HYS1.eff
awk '$1!="."{print $1}' HYS2 | sort -u > HYS2.eff

# vector of animals in the pedigree
awk '{print $1}' ped_stk > id.eff

# vector of unique animals in the performance file
awk '$1!="."{print $1}' id.dat.1 | sort -u > perf_id.eff.1
awk '$1!="."{print $1}' id.dat.2 | sort -u > perf_id.eff.2

# create X 
helical euler zgen -d HYS1 -e HYS1.eff -r y1 -o X1
helical euler zgen -d HYS2 -e HYS2.eff -r y2 -o X2

# create Z 
helical euler zgen -d id.dat.1 -e id.eff -r y1 -o Z1
helical euler zgen -d id.dat.2 -e id.eff -r y2 -o Z2

helical euler invR -S -R resid -r R0 y1 y2

# create LHS and RHS matrices
cat << EOF > expr-lhs-rhs
# create LHS matrices
write("X1RX1", X1' * resid11 * X1)
write("X1RX2", X1' * resid12 * X2)
write("X2RX1", X2' * resid12 * X1)
write("X2RX2", X2' * resid22 * X2)

write("X1RZ1", X1' * resid11 * Z1)
write("X1RZ2", X1' * resid12 * Z2)
write("X2RZ1", X2' * resid12 * Z1)
write("X2RZ2", X2' * resid22 * Z2)

write("Z1RZ1", Z1' * resid11 * Z1)
write("Z1RZ2", Z1' * resid12 * Z2)
write("Z2RZ1", Z2' * resid12 * Z1)
write("Z2RZ2", Z2' * resid22 * Z2)

# create RHS vectors
X1Ry1 = X1' * resid11 * y1
X2Ry1 = X2' * resid12 * y1
X1Ry2 = X1' * resid12 * y2
X2Ry2 = X2' * resid22 * y2 

Z1Ry1 = Z1' * resid11 * y1
Z2Ry1 = Z2' * resid12 * y1
Z1Ry2 = Z1' * resid12 * y2
Z2Ry2 = Z2' * resid22 * y2

write("rhs.0", X1Ry1 + X1Ry2) #HYS effects FAT1
write("rhs.1", X2Ry1 + X2Ry2) #HYS effects FAT2
write("rhs.2", Z1Ry1 + Z1Ry2) #BV FAT1
write("rhs.3", Z2Ry1 + Z2Ry2) #BV FAT2
EOF

helical euler expr expr-lhs-rhs

# set up LHS
echo "MAP
X1RX1   X1RX2   X1RZ1          X1RZ2
sym     X2RX2   X2RZ1          X2RZ2
sym     sym     Z1RZ1+Ainv*g11 Z2RZ1+Ainv*g12
sym     sym     sym            Z2RZ2+Ainv*g22" > lhsmap

# set up RHS
echo "MAP
rhs.0
rhs.1
rhs.2
rhs.3" > rhsmap

# solve!
helical euler pcg lhsmap rhsmap sol -n 100 

# generate results files
mkdir Results
echo "Effect Solution" > Results/FixedEffectsFAT1
paste -d " " HYS1.eff <(helical euler print sol_0_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/FixedEffectsFAT1 
echo "Effect Solution" > Results/FixedEffectsFAT2
paste -d " " HYS2.eff <(helical euler print sol_1_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/FixedEffectsFAT2

#generate one fixed effects file instead of two with labels for WWG or PWG sec effects
echo "Effect Solution" > Results/FixedEffects
paste -d " " <(awk '{print $1"-HYS1"}' HYS1.eff) <(helical euler print sol_0_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/FixedEffects
paste -d " " <(awk '{print $1"-HYS2"}' HYS2.eff) <(helical euler print sol_1_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/FixedEffects


# results in stacked pedigree order
echo "Animal Solution" > Results/AnimalEffectsFAT1
paste -d " " id.eff <(helical euler print sol_2_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/AnimalEffectsFAT1
echo "Animal Solution" > Results/AnimalEffectsFAT2
paste -d " " id.eff <(helical euler print sol_3_0) | awk '{printf "%s %.3f\n",$1,$2}' >> Results/AnimalEffectsFAT2

#to write results in the sorted pedigree order:
echo "Animal Solution" > Results/AnimalEffectsFAT1.srt
paste -d " " id.eff <(helical euler print sol_2_0) | sort | awk '{printf "%s %.3f\n",$1,$2}' >> Results/AnimalEffectsFAT1.srt
echo "Animal Solution" > Results/AnimalEffectsFAT2.srt
paste -d " " id.eff <(helical euler print sol_3_0) | sort | awk '{printf "%s %.3f\n",$1,$2}' >> Results/AnimalEffectsFAT2.srt
