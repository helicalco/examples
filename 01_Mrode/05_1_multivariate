#!/bin/bash
####################################################################################
#                                                                                  #
#                  Multivariate Example 5.1, pages 85 - 88                         #
#                                                                                  #
####################################################################################
mkdir -pv 05_1.run
cd 05_1.run

# generate pedigree file
# IDs can be left as in the textbook e.g. 1, 2 or can be strings e.g. anim001 or ID1 etc.
echo "anim sire dam" > ped_head
cat <<EOF > pedigree
anim001 . .
anim002 . .
anim003 . .
anim004 anim001 .
anim005 anim003 anim002
anim006 anim001 anim002
anim007 anim004 anim005
anim008 anim003 anim006
EOF

# generate performance file
echo "anim Sex WWG PWG" > perf_head
cat <<EOF > perf
anim004 M 4.5 6.8
anim005 F 2.9 5.0
anim006 F 3.9 6.8
anim007 M 3.5 6.0
anim008 M 5.0 7.5
EOF

# generate genetic variance file
cat <<EOF > G0
20 18
18 40
EOF

# generate residual variance file
cat <<EOF > R0
40 11
11 30
EOF

cat << EOF > expr-G0
G0inv = inv(G0)
write("g11", G0inv[1;1])
write("g12", G0inv[1;2])
write("g22", G0inv[2;2])
EOF

helical euler expr expr-G0

# stack pedigree
helical bolt pedstack pedigree ped_stk

# generate Ainverse
helical bolt invnrm -p ped_stk -v Ainv

# vectors to generate X and Z
awk '{print $1}' perf > id.dat 		# animals with phenotypes
awk '{print $2}' perf > Sex 		# sex
awk '{print $3}' perf > y1 			# WWG phenotypes
awk '{print $4}' perf > y2 			# PWG phenotypes

# vectors for levels of each fixed effect
awk '$1!="."{print $1}' Sex | sort -u > Sex.eff

# vector of animals in the pedigree
awk '{print $1}' ped_stk > id.eff

# vector of unique animals in the performance file
awk '$1!="."{print $1}' id.dat | sort -u > perf_id.eff

# create X (no missing values so X11 and X12 are identical)
helical euler zgen -d Sex -e Sex.eff -r y1 -o X11

# create Z (no missing values so Z11 and Z12 are identical)
helical euler zgen -d id.dat -e id.eff -r y1 -o Z11

helical euler invr -S -R resid -r R0 y1 y2

# create LHS and RHS matrices
cat << EOF > expr-lhs-rhs
#lhs
write("X1RX1", X11' * resid11 * X11)
write("X1RX2", X11' * resid12 * X11)
write("X2RX2", X11' * resid22 * X11)

write("X1RZ1", X11' * resid11 * Z11)
write("X1RZ2", X11' * resid12 * Z11)
write("X2RZ1", X11' * resid12 * Z11)
write("X2RZ2", X11' * resid22 * Z11)

write("Z1RZ1", Z11' * resid11 * Z11)
write("Z1RZ2", Z11' * resid12 * Z11)
write("Z2RZ1", Z11' * resid12 * Z11)
write("Z2RZ2", Z11' * resid22 * Z11)

#rhs
X1Ry1 = X11' * resid11 * y1
X2Ry1 = X11' * resid12 * y1
X1Ry2 = X11' * resid12 * y2
X2Ry2 = X11' * resid22 * y2

Z1Ry1 = Z11' * resid11 * y1
Z2Ry1 = Z11' * resid12 * y1
Z1Ry2 = Z11' * resid12 * y2
Z2Ry2 = Z11' * resid22 * y2

#sex effects WWG
write("rhs.1", X1Ry2 + X1Ry2 )
#sex effects PWG
write("rhs.2", X2Ry2 + X2Ry2 )
#BV WWG
write("rhs.3", Z1Ry2 + Z1Ry2 )
#BV PWG
write("rhs.4", Z2Ry2 + Z2Ry2 )
EOF

helical euler expr expr-lhs-rhs

# set up LHS
echo "MAP
X1RX1   X1RX2   X1RZ1          X1RZ2
sym     X2RX2   X2RZ1          X2RZ2
sym     sym     Z1RZ1+Ainv*g11 Z2RZ1+Ainv*g12
sym     sym     sym            Z2RZ2+Ainv*g22" > lhsmap

# set up RHS
echo "MAP
rhs.1
rhs.2
rhs.3
rhs.4" > rhsmap

# solve!
helical euler pcg lhsmap rhsmap sol -n 100 

# generate results files
mkdir -pv results
echo "Effect Solution" > results/FixedEffectsWWG
paste -d " " Sex.eff <(helical euler print sol.rhs.1) | awk '{printf "%s %.3f\n",$1,$2}' >> results/FixedEffectsWWG # will be in a different order to textbook
echo "Effect Solution" > results/FixedEffectsPWG
paste -d " " Sex.eff <(helical euler print sol.rhs.2) | awk '{printf "%s %.3f\n",$1,$2}' >> results/FixedEffectsPWG

#generate one fixed effects file instead of two with labels for WWG or PWG sec effects
echo "Effect Solution" > results/FixedEffects
paste -d " " <(awk '{print $1"-WWG"}' Sex.eff) <(helical euler print sol.rhs.1) | awk '{printf "%s %.3f\n",$1,$2}' >> results/FixedEffects
paste -d " " <(awk '{print $1"-PWG"}' Sex.eff) <(helical euler print sol.rhs.2) | awk '{printf "%s %.3f\n",$1,$2}' >> results/FixedEffects


#results are in stacked pedigree order by default
echo "Animal Solution" > results/AnimalEffectsWWG
paste -d " " id.eff <(helical euler print sol.rhs.3) | awk '{printf "%s %.3f\n",$1,$2}' >> results/AnimalEffectsWWG
echo "Animal Solution" > results/AnimalEffectsPWG
paste -d " " id.eff <(helical euler print sol.rhs.4) | awk '{printf "%s %.3f\n",$1,$2}' >> results/AnimalEffectsPWG

# results in ID sorted order
echo "Animal Solution" > results/AnimalEffectsWWG.srt
paste -d " " id.eff <(helical euler print sol.rhs.3) | sort | awk '{printf "%s %.3f\n",$1,$2}' >> results/AnimalEffectsWWG.srt
echo "Animal Solution" > results/AnimalEffectsPWG.srt
paste -d " " id.eff <(helical euler print sol.rhs.4) | sort | awk '{printf "%s %.3f\n",$1,$2}' >> results/AnimalEffectsPWG.srt
